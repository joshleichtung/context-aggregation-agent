import axios from 'axios';

interface FriendliAIResponse {
  choices: Array<{
    message: {
      content: string;
    };
  }>;
}

class FriendliAIService {
  private readonly baseUrl: string;
  private readonly apiKey: string;
  private readonly model: string;

  constructor() {
    this.baseUrl = process.env.FRIENDLIAI_BASE_URL || 'https://api.friendli.ai/v1';
    this.apiKey = process.env.FRIENDLIAI_API_KEY || '';
    this.model = process.env.FRIENDLIAI_MODEL || 'mistral-7b-instruct';
  }

  async generateSummary(context: string, topic: string): Promise<string> {
    // TODO: Implement actual FriendliAI integration
    // For now, this is a placeholder that would call FriendliAI's API

    const prompt = `You are a helpful assistant that creates concise summaries of context.

Topic: ${topic}

Context:
${context}

Please provide a clear, concise summary of the above context focusing on the topic "${topic}".
Highlight key points, decisions, and action items if any.`;

    try {
      const response = await axios.post<FriendliAIResponse>(
        `${this.baseUrl}/chat/completions`,
        {
          model: this.model,
          messages: [
            {
              role: 'system',
              content:
                'You are a helpful assistant that creates clear and concise summaries.',
            },
            {
              role: 'user',
              content: prompt,
            },
          ],
          max_tokens: 500,
          temperature: 0.7,
        },
        {
          headers: {
            Authorization: `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json',
          },
        }
      );

      return response.data.choices[0]?.message?.content || 'No summary generated';
    } catch (error) {
      console.error('Error generating summary with FriendliAI:', error);
      // Return a mock summary for development
      return `Summary for topic "${topic}": This is a placeholder summary of the provided context. In production, this would be generated by FriendliAI based on the actual context content.`;
    }
  }

  async batchGenerateSummaries(
    contexts: Array<{ context: string; topic: string }>
  ): Promise<string[]> {
    const summaries = await Promise.all(
      contexts.map(({ context, topic }) => this.generateSummary(context, topic))
    );
    return summaries;
  }
}

export const friendliAIService = new FriendliAIService();
